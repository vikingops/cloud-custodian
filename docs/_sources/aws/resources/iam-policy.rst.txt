.. File Generated By c7n-sphinxext from source. Do not edit.

.. _aws.iam-policy:

aws.iam-policy
==============




Filters
-------


  - :ref:`check-permissions <aws.common.filters.check-permissions>`
  
  - :ref:`config-compliance <aws.common.filters.config-compliance>`
  
  - :ref:`event <aws.common.filters.event>`
  
  - :ref:`finding <aws.common.filters.finding>`
  
  - :ref:`has-allow-all <aws.iam-policy.filters.has-allow-all>`

  - :ref:`json-diff <aws.iam-policy.filters.json-diff>`

  - :ref:`marked-for-op <aws.common.filters.marked-for-op>`
  
  - :ref:`ops-item <aws.common.filters.ops-item>`
  
  - :ref:`reduce <aws.common.filters.reduce>`
  
  - :ref:`unused <aws.iam-policy.filters.unused>`

  - :ref:`usage <aws.common.filters.usage>`
  
  - :ref:`used <aws.iam-policy.filters.used>`

  - :ref:`value <aws.common.filters.value>`
  


.. _aws.iam-policy.filters.has-allow-all:

has-allow-all
+++++++++++++
Check if IAM policy resource(s) have allow-all IAM policy statement block.

This allows users to implement CIS AWS check 1.24 which states that no
policy must exist with the following requirements.

Policy must have 'Action' and Resource = '*' with 'Effect' = 'Allow'

The policy will trigger on the following IAM policy (statement).
For example:

.. code-block:: json

  {
      "Version": "2012-10-17",
      "Statement": [{
          "Action": "*",
          "Resource": "*",
          "Effect": "Allow"
      }]
  }

Additionally, the policy checks if the statement has no 'Condition' or
'NotAction'.

For example, if the user wants to check all used policies and filter on
allow all:

.. code-block:: yaml

 - name: iam-no-used-all-all-policy
   resource: iam-policy
   filters:
     - type: used
     - type: has-allow-all

Note that scanning and getting all policies and all statements can take
a while. Use it sparingly or combine it with filters such as 'used' as
above.

.. container:: toggle

  

  .. raw:: html
     
    <div class="header docutils container" style=""></div>

  .. code-block:: yaml

    properties:
      type:
        enum:
        - has-allow-all
    required:
    - type




Permissions - iam:ListPolicies, iam:ListPolicyVersions


.. _aws.iam-policy.filters.json-diff:

json-diff
+++++++++
Compute the diff from the current resource to a previous version.

A resource matches the filter if a diff exists between the current
resource and the selected revision.

Utilizes config as a resource revision database.

Revisions can be selected by date, against the previous version, and
against a locked version (requires use of is-locked filter).

.. container:: toggle

  

  .. raw:: html
     
    <div class="header docutils container" style=""></div>

  .. code-block:: yaml

    properties:
      selector:
        enum:
        - previous
        - date
        - locked
      selector_value:
        type: string
      type:
        enum:
        - json-diff
    required:
    - type




Permissions - config:GetResourceConfigHistory


.. _aws.iam-policy.filters.unused:

unused
++++++
Filter IAM policies that are not being used
(neither attached to any roles nor used as a permissions boundary).

:example:

.. code-block:: yaml

    policies:
      - name: iam-policy-unused
        resource: iam-policy
        filters:
          - type: unused

.. container:: toggle

  

  .. raw:: html
     
    <div class="header docutils container" style=""></div>

  .. code-block:: yaml

    properties:
      type:
        enum:
        - unused
    required:
    - type




Permissions - iam:ListPolicies


.. _aws.iam-policy.filters.used:

used
++++
Filter IAM policies that are being used
(either attached to some roles or used as a permissions boundary).

:example:

.. code-block:: yaml

    policies:
      - name: iam-policy-used
        resource: iam-policy
        filters:
          - type: used

.. container:: toggle

  

  .. raw:: html
     
    <div class="header docutils container" style=""></div>

  .. code-block:: yaml

    properties:
      type:
        enum:
        - used
    required:
    - type




Permissions - iam:ListPolicies




Actions
-------


  - :ref:`auto-tag-user <aws.common.actions.auto-tag-user>`
  
  - :ref:`copy-related-tag <aws.common.actions.copy-related-tag>`
  
  - :ref:`delete <aws.iam-policy.actions.delete>`

  - :ref:`invoke-lambda <aws.common.actions.invoke-lambda>`
  
  - :ref:`invoke-sfn <aws.common.actions.invoke-sfn>`
  
  - :ref:`mark-for-op <aws.common.actions.mark-for-op>`
  
  - :ref:`notify <aws.common.actions.notify>`
  
  - :ref:`post-finding <aws.common.actions.post-finding>`
  
  - :ref:`post-item <aws.common.actions.post-item>`
  
  - :ref:`put-metric <aws.common.actions.put-metric>`
  
  - :ref:`remove-tag <aws.common.actions.remove-tag>`
  
  - :ref:`tag <aws.common.actions.tag>`
  
  - :ref:`webhook <aws.common.actions.webhook>`
  



.. _aws.iam-policy.actions.delete:

delete
++++++
Delete an IAM Policy.

For example, if you want to automatically delete all unused IAM policies.

:example:

  .. code-block:: yaml

    - name: iam-delete-unused-policies
      resource: iam-policy
      filters:
        - type: unused
      actions:
        - delete

.. container:: toggle

  

  .. raw:: html
     
    <div class="header docutils container" style=""></div>

  .. code-block:: yaml

    properties:
      type:
        enum:
        - delete
    required:
    - type




Permissions - iam:DeletePolicy

